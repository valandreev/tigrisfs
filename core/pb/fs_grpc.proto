// Copyright 2024 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "github.com/valandreev/tigrisfs/core/pb";

service FsGrpc {
  // stealing
  rpc TryStealInodeOwnership(TryStealInodeOwnershipRequest) returns (TryStealInodeOwnershipResponse);

  // file
  rpc CreateFile(CreateFileRequest) returns (CreateFileResponse);
  rpc Unlink(UnlinkRequest) returns (UnlinkResponse);
  rpc OpenFile(OpenFileRequest) returns (OpenFileResponse);
  rpc ReleaseFileHandle(ReleaseFileHandleRequest) returns (ReleaseFileHandleResponse);
  rpc ReadFile(ReadFileRequest) returns (ReadFileResponse);
  rpc WriteFile(WriteFileRequest) returns (WriteFileResponse);

  // symlinks
  rpc CreateSymlink(CreateSymlinkRequest) returns (CreateSymlinkResponse);
  rpc ReadSymlink(ReadSymlinkRequest) returns (ReadSymlinkResponse);

  // dir
  rpc MkDir(MkDirRequest) returns (MkDirResponse);
  rpc RmDir(RmDirRequest) returns (RmDirResponse);
  rpc OpenDir(OpenDirRequest) returns (OpenDirResponse);
  rpc ReleaseDirHandle(ReleaseDirHandleRequest) returns (ReleaseDirHandleResponse);
  rpc ReadDir(ReadDirRequest) returns (ReadDirResponse);
  rpc LookUpInode(LookUpInodeRequest) returns (LookUpInodeResponse);
  rpc LookUpInode2(LookUpInode2Request) returns (LookUpInode2Response);

  // both
  rpc GetInodeAttributes(GetInodeAttributesRequest) returns (GetInodeAttributesResponse);
  rpc SetInodeAttributes(SetInodeAttributesRequest) returns (SetInodeAttributesResponse);
  
  rpc ForgetInode(ForgetInodeRequest) returns (ForgetInodeResponse);
  rpc ForgetInode2(ForgetInode2Request) returns (ForgetInode2Response);
}

message Inode {
  uint64 id = 1;
  string name = 2;
  bool dir = 3;
  bool symlink = 4;
  Owner owner = 5;
}

message Owner {
  uint64 term = 1;
  uint64 nodeId = 2;
}

message Attributes {
  uint64 size = 1;
  google.protobuf.Timestamp mtime = 2;
  google.protobuf.Timestamp ctime = 3;
  uint32 mode = 4;
}

message StolenInode {
  uint64 ownerTerm = 1;
  Attributes attr = 3;
  map<string, bytes> userMetadata = 4;
  int64 refcnt = 5;
  map<uint64, uint64> refcnts = 6;
  repeated Inode children = 7;
}

message JoinClusterRequest {
  string url = 1;
  uint64 nodeId = 2;
}

message JoinClusterResponse {
  message Peer {
    uint64 nodeId = 1;
    string url = 2;
  }
  uint64 nodeId = 1;
  repeated Peer peers = 2;
}

message AreYouInodeOwnerRequest {
  uint64 inodeId = 1;
}

message AreYouInodeOwnerResponse {
  bool yes = 1;
}

message TryStealInodeOwnershipRequest {
  uint64 inodeId = 1;
  uint64 nodeId = 2;
}

message TryStealInodeOwnershipResponse {
  optional Owner AnotherOwner = 1;
  optional StolenInode stolenInode = 2;
}

message CreateFileRequest {
    uint64 parent = 2;
    string name = 3;
    uint32 mode = 4;
    uint64 nodeId = 5;
}

message CreateFileResponse {
  optional Owner AnotherOwner = 1;

  // inode to ensure
  Inode inode = 2;

  // return values
  uint64 child = 3;
  Attributes attr = 4;
  uint64 handleId = 5;
}

message UnlinkRequest {
  uint64 parent = 1;
  string name = 2;
}

message UnlinkResponse {
  optional Owner AnotherOwner = 1;

  // inode to ensure
  Inode inode = 2;

  // return values
  uint64 errno = 3;
}

message OpenFileRequest {
  uint64 inodeId = 1;
}

message OpenFileResponse {
  optional Owner AnotherOwner = 1;

  // return values
  uint64 handleId = 2;
  uint64 errno = 3;
}

message ReleaseFileHandleRequest {
  uint64 handleId = 1;
}

message ReleaseFileHandleResponse {
  optional Owner AnotherOwner = 1;
}

message ReadFileRequest {
  uint64 handleId = 1;
  int64 offset = 2;
  int64 size = 3;
}

message ReadFileResponse {
  optional Owner AnotherOwner = 1;

  // return values
  int32 bytesRead = 2;
  bytes data = 3;
  uint64 errno = 4;
}

message WriteFileRequest {
  uint64 handleId = 1;
  int64 offset = 2;
  bytes data = 3;
}

message WriteFileResponse {
  optional Owner AnotherOwner = 1;

  // return values
  uint64 errno = 2;
}

message CreateSymlinkRequest {
  uint64 parent = 1;
  string name = 2;
  string target = 3;
  uint64 nodeId = 4;
}

message CreateSymlinkResponse {
  optional Owner AnotherOwner = 1;

  // inode to ensure
  Inode inode = 2;

  // return values
  uint64 child = 3;
  Attributes attr = 4;
}

message ReadSymlinkRequest {
  uint64 inode = 1;
}

message ReadSymlinkResponse {
  optional Owner AnotherOwner = 1;

  string target = 2;
  uint64 errno = 3;
}

message MkDirRequest {
  uint64 parent = 2;
  string name = 3;
  uint32 mode = 4;
  uint64 nodeId = 5;
}

message MkDirResponse {
  optional Owner AnotherOwner = 1;

  // inode to ensure
  Inode inode = 2;

  // return values
  uint64 child = 3;
  Attributes attr = 4;
}

message RmDirRequest {
  uint64 parent = 1;
  string name = 2;
}

message RmDirResponse {
  optional Owner AnotherOwner = 1;
  uint64 errno = 2;
}

message OpenDirRequest {
  uint64 inodeId = 1;
}

message OpenDirResponse {
  optional Owner AnotherOwner = 1;

  // return values
  uint64 handleId = 2;
  uint64 errno = 3;
}

message ReleaseDirHandleRequest {
  uint64 handleId = 1;
}

message ReleaseDirHandleResponse {
  optional Owner AnotherOwner = 1;
}

message ReadDirRequest {
  uint64 callerId = 1;
  uint64 handleId = 2;
  uint64 offset = 3;
  bytes dst = 4;
  int32 bytesRead = 5;
}

message ReadDirResponse {
  optional Owner AnotherOwner = 1;

  // return values
  bytes dst = 2;
  int32 bytesRead = 3;
  uint64 errno = 4;
}

message LookUpInodeRequest {
  uint64 parent = 1;
  string name = 2;
  uint64 nodeId = 3;
}

message LookUpInodeResponse {
  optional Owner AnotherOwner = 1;

  // inode to ensure
  optional Inode inode = 2;

  // return values
  uint64 child = 3;
  Attributes attr = 4;
  uint64 errno = 5;
}

message LookUpInode2Request {
  uint64 inodeId = 1;
  uint64 nodeId = 2;
}

message LookUpInode2Response {
  optional Owner AnotherOwner = 1;
  Attributes attr = 2;
}

message GetInodeAttributesRequest {
  uint64 inodeId = 1;
}

message GetInodeAttributesResponse {
  optional Owner AnotherOwner = 1;

  // return values
  Attributes attributes = 2;
}

message SetInodeAttributesRequest {
  uint64 inodeId = 1;
  optional uint64 size = 2;
  optional uint32 mode = 3;
  optional google.protobuf.Timestamp ctime = 4;
  optional google.protobuf.Timestamp mtime = 5;
}

message SetInodeAttributesResponse {
  optional Owner AnotherOwner = 1;

  // return values
  Attributes attributes = 2;
}

message ForgetInodeRequest {
  uint64 inodeId = 1;
  uint64 nodeId = 2;
  uint64 n = 3;
}

message ForgetInodeResponse {
  optional Owner AnotherOwner = 1;
  bool forget = 2;
}

message ForgetInode2Request {
  uint64 inodeId = 1;
}

message ForgetInode2Response {
}
